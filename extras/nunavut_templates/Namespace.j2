/**
 * This software is distributed under the terms of the MIT License.
 * Copyright (c) 2020 LXRobotics.
 * Author: Alexander Entinger <alexander.entinger@lxrobotics.com>
 * Contributors: https://github.com/107-systems/107-Arduino-UAVCAN/graphs/contributors.
 */

#ifndef ARDUINO_UAVCAN_NAMESPACE_TYPE_{{ T.full_namespace.replace(".", "_").upper() }}_HPP_
#define ARDUINO_UAVCAN_NAMESPACE_TYPE_{{ T.full_namespace.replace(".", "_").upper() }}_HPP_

/**************************************************************************************
 * TEMPLATE IMPLEMENTATION
 **************************************************************************************/

/**************************************************************************************
 * CHILD Namespace Includes
 **************************************************************************************/

{% for ns in T.get_nested_namespaces() %}
#include <wrappers/{{ ns.full_namespace.replace(".", "/") }}/NSTypes.hpp>
{% endfor %}

/**************************************************************************************
 * INCLUDE
 **************************************************************************************/

{% for type, _ in T.get_nested_types() %}
#include <types/{{ type.full_name.replace(".", "/") }}_{{type.version.major}}_{{type.version.minor}}.h>
{% endfor %}


/**************************************************************************************
 * PARTIAL TEMPLATE SPECIALISATION
 **************************************************************************************/

{% for type, _ in T.get_nested_types() %}
{% set typename %}{{ type.full_name.replace(".", "_") }}_{{type.version.major}}_{{type.version.minor}} {% endset %}
// {{ typename }}
template<> inline void   func_initialize <{{ typename }}>({{ typename }} * const obj) { {{ typename }}_initialize_(obj); }
template<> inline int8_t func_serialize  <{{ typename }}>(const typename * const obj, uint8_t * const buffer, size_t * const inout_buffer_size_bytes) { return {{ typename }}_serialize_(obj, buffer, inout_buffer_size_bytes); }
template<> inline int8_t func_deserialize<{{ typename }}>({{ typename }} * const obj, const uint8_t * const buffer, size_t * const inout_buffer_size_bytes) { return {{ typename }}_deserialize_(obj, buffer, inout_buffer_size_bytes); }


{% endfor %}

#endif /* ARDUINO_UAVCAN_NAMESPACE_TYPE_{{ T.full_namespace.replace(".", "_").upper() }}_HPP_ */
