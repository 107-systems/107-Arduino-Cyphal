// UAVCAN data structure definition.                                                                          +-+ +-+
//                                                                                                            | | | |
// AUTOGENERATED, DO NOT EDIT.                                                                                \  -  /
//                                                                                                              ---
//                                                                                                               o
// +------------------------------------------------------------------------------------------------------------------+
//
// Generator:
// nunavut-0.3.9 (serialization was enabled)
//
//
// Source File:
// /home/alex/projects/107-systems/public_regulated_data_types/uavcan/node/32085.Heartbeat.1.0.uavcan
//
// Template:
// StructureType.j2
//
// Generated at:  2020-09-15 12:16:39.449037 UTC
// Is deprecated: no
// Fixed port ID: 32085
// Full name:     uavcan.node.Heartbeat
// Version:       1.0

#ifndef UAVCAN_NODE_HEARTBEAT_1_0_INCLUDED
#define UAVCAN_NODE_HEARTBEAT_1_0_INCLUDED

#include <nunavut/support/serialization.h>
#include <stdint.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define uavcan_node_Heartbeat_1_0_MAX_PUBLICATION_PERIOD (1)
#define uavcan_node_Heartbeat_1_0_OFFLINE_TIMEOUT (3)
#define uavcan_node_Heartbeat_1_0_HEALTH_NOMINAL (0)
#define uavcan_node_Heartbeat_1_0_HEALTH_ADVISORY (1)
#define uavcan_node_Heartbeat_1_0_HEALTH_CAUTION (2)
#define uavcan_node_Heartbeat_1_0_HEALTH_WARNING (3)
#define uavcan_node_Heartbeat_1_0_MODE_OPERATIONAL (0)
#define uavcan_node_Heartbeat_1_0_MODE_INITIALIZATION (1)
#define uavcan_node_Heartbeat_1_0_MODE_MAINTENANCE (2)
#define uavcan_node_Heartbeat_1_0_MODE_SOFTWARE_UPDATE (3)
#define uavcan_node_Heartbeat_1_0_MODE_OFFLINE (7)

typedef struct
{
    uint32_t uptime;
    uint8_t health;
    uint8_t mode;
    uint32_t vendor_specific_status_code;
} uavcan_node_Heartbeat_1_0;

/// Initialize an uavcan_node_Heartbeat_1_0 instance to default values.
/// No memory is allocated within this method.
/// Does nothing if @ref out_instance is NULL.
///
/// @param out_instance A structure instance to Initialize.
static inline void uavcan_node_Heartbeat_1_0_init(uavcan_node_Heartbeat_1_0* const out_instance)
{
    if (out_instance != NULL)
    {
        out_instance->uptime = 0;
        out_instance->health = 0;
        out_instance->mode = 0;
        out_instance->vendor_specific_status_code = 0;
    }
}

/// Contains the maximum number of bytes needed to serialize a(n) uavcan_node_Heartbeat_1_0
/// instance.
#define uavcan_node_Heartbeat_1_0_MAX_SERIALIZED_REPRESENTATION_SIZE_BYTES \
        (7U)



/// uavcan_node_Heartbeat_1_0 can only be used with the fixed port identifier defined here.
#define uavcan_node_Heartbeat_1_0_FIXED_PORT_ID (32085U)
/// Serialization of uavcan_node_Heartbeat_1_0 instance into a byte array.
///
/// @param in_instance   A structure instance to serialize.
/// @param offset        Offset (in bits) of data type in message.
/// @param out_buffer    Output message buffer.
///
/// @returns             Size of encoded data (in bits)
static inline int32_t uavcan_node_Heartbeat_1_0_serialize(const uavcan_node_Heartbeat_1_0* in_instance, uint32_t offset, uint8_t* const out_buffer)
{

    if (out_buffer == NULL)
    {
        return -NUNAVUT_ERR_INVALID_BUF;
    }

    // Begin Structure: saturated uint32
    nunavutSetUxx(out_buffer, offset, in_instance->uptime, 32);
    offset += 32;
    // End Structure: saturated uint32
    // Begin Structure: truncated uint2
    nunavutSetUxx(out_buffer, offset, in_instance->health, 2);
    offset += 2;
    // End Structure: truncated uint2
    // Begin Structure: truncated uint3
    nunavutSetUxx(out_buffer, offset, in_instance->mode, 3);
    offset += 3;
    // End Structure: truncated uint3
    // Begin Structure: truncated uint19
    nunavutSetUxx(out_buffer, offset, in_instance->vendor_specific_status_code, 19);
    offset += 19;
    // End Structure: truncated uint19

    return offset;
}

/// Deserialization of byte-array encoding into uavcan_node_Heartbeat_1_0 instance.
///
/// @param out_instance      Structure instance to write data to.
/// @param offset            Bit offset of structure in data buffer.
/// @param in_buffer         Message buffer to deserialize.
/// @param buf_size_bytes    Length of input buffer (in bytes) to avoid overflow.
///
/// @returns                 Size of decoded data (in bits)
static inline int32_t uavcan_node_Heartbeat_1_0_deserialize(uavcan_node_Heartbeat_1_0* const out_instance, uint32_t offset, uint8_t* const in_buffer, const size_t buf_size_bytes)
{

    if (in_buffer == NULL)
    {
        return -NUNAVUT_ERR_INVALID_BUF;
    }

    // Begin Structure: saturated uint32
    out_instance->uptime = nunavutGetU32(in_buffer, buf_size_bytes, offset, 32);
    offset += 32;
    // End Structure: saturated uint32
    // Begin Structure: truncated uint2
    out_instance->health = nunavutGetU8(in_buffer, buf_size_bytes, offset, 2);
    offset += 2;
    // End Structure: truncated uint2
    // Begin Structure: truncated uint3
    out_instance->mode = nunavutGetU8(in_buffer, buf_size_bytes, offset, 3);
    offset += 3;
    // End Structure: truncated uint3
    // Begin Structure: truncated uint19
    out_instance->vendor_specific_status_code = nunavutGetU32(in_buffer, buf_size_bytes, offset, 19);
    offset += 19;
    // End Structure: truncated uint19

    return offset;
}


#ifdef __cplusplus
} /* End extern "C" */
#endif /* __cplusplus */
#endif /* UAVCAN_NODE_HEARTBEAT_1_0_INCLUDED */
